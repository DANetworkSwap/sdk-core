{"version":3,"file":"sdk-core.esm.js","sources":["../src/constants.ts","../src/entities/currency.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/fractions/tokenAmount.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts","../src/utils/sqrt.ts","../src/entities/weth.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum ChainId {\n  MAINNET = 8996,\n  TESTNET = 8996,\n  SHASTA = 8996\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import invariant from 'tiny-invariant'\n\nexport class Currency {\n  readonly decimals: number\n  readonly symbol?: string\n  readonly name?: string\n\n  public static readonly ETHER: Currency = new Currency(6, 'TRX', 'Tron')\n\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n    this.decimals = decimals\n    this.name = name\n    this.symbol = symbol\n  }\n\n  public equals(other: Currency): boolean {\n    if (this === other) {\n      return true\n    }\n    return this.name === other.name && this.symbol === other.symbol\n  }\n}\n\nexport const ETHER = Currency.ETHER\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency, ETHER } from '../currency'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n  public readonly decimalScale: JSBI\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount(currency: Currency, rawAmount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount(currency: Currency, numerator: BigintIsh, denominator: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: Currency, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\nimport { Token } from '..'\nimport { TokenAmount } from '.'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  get adjusted(): Fraction {\n    return this.asFraction.multiply(this.scalar)\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply(other: Price): Price {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    if (this.quoteCurrency instanceof Token) {\n      return TokenAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n    }\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { CurrencyAmount, Fraction } from '.'\nimport { Token } from '..'\nimport { BigintIsh } from '../..'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  constructor(token: Token, amount: BigintIsh, denominator?: BigintIsh) {\n    super(token, amount, denominator)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public multiply(other: Fraction | BigintIsh): TokenAmount {\n    const multiplied = super.multiply(other)\n    return TokenAmount.fromFractionalAmount(this.token, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): TokenAmount {\n    const divided = super.divide(other)\n    return TokenAmount.fromFractionalAmount(this.token, divided.numerator, divided.denominator)\n  }\n\n  /**\n   * fromRawAmount\n   * @param token the token\n   * @param rawAmount the numerator of the fractional token amount\n   */\n  public static fromRawAmount(token: Token, rawAmount: BigintIsh): TokenAmount {\n    return new TokenAmount(token, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param token the token\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount(token: Token, numerator: BigintIsh, denominator: BigintIsh): TokenAmount {\n    return new TokenAmount(token, numerator, denominator)\n  }\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '..'\nimport { validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  public equals(other: Token): boolean {\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n\nexport function currencyEquals(currencyA: Currency, currencyB: Currency) {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  [1]: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  [3]: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [4]: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [5]: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [42]: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  [10]: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [69]: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [42161]: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  [421611]: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether')\n}\n","import { CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact(\n  midPrice: Price,\n  inputAmount: CurrencyAmount,\n  outputAmount: CurrencyAmount\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n","import { Token } from '.'\nimport { ChainId } from '..'\n\nexport const WETH: { [chainId: number]: Token } = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0x891CDB91D149F23B1A45D9C5CA78A88D0CB44C18', 6, 'WDA', 'Wrapped DA'),\n  [ChainId.TESTNET]: new Token(ChainId.TESTNET, '0x8f44113A985076431b77f6078f0929f949cB8836', 6, 'WDA', 'Wrapped DA'),\n  [ChainId.SHASTA]: new Token(ChainId.SHASTA, '0xB970B980C520EC3F49921C2727BFA6DE79E7226A', 6, 'WDA', 'Wrapped DA')\n}\n"],"names":["ChainId","TradeType","Rounding","MaxUint256","JSBI","BigInt","Currency","decimals","symbol","name","Number","isInteger","process","env","NODE_ENV","invariant","_proto","prototype","equals","other","ETHER","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","invert","add","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","_Fraction","_inheritsLoose","currency","_this","call","lessThanOrEqual","decimalScale","exponentiate","ether","amount","fromRawAmount","rawAmount","fromFractionalAmount","added","subtracted","multiplied","divided","toExact","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","scalar","quote","currencyAmount","result","Token","TokenAmount","adjustedForDecimals","asFraction","_CurrencyAmount","token","raw","validateAndParseAddress","address","getAddress","error","_Currency","chainId","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH9","_WETH","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","MAX_SAFE_INTEGER","ZERO","ONE","TWO","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x","WETH","MAINNET","TESTNET","SHASTA"],"mappings":"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"}