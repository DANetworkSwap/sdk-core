{"version":3,"file":"sdk-core.cjs.production.min.js","sources":["../src/constants.ts","../src/entities/currency.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/fractions/tokenAmount.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/utils/sqrt.ts","../src/entities/weth.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum ChainId {\n  MAINNET = 8996,\n  TESTNET = 8996,\n  SHASTA = 8996\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import invariant from 'tiny-invariant'\n\nexport class Currency {\n  readonly decimals: number\n  readonly symbol?: string\n  readonly name?: string\n\n  public static readonly ETHER: Currency = new Currency(6, 'TRX', 'Tron')\n\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n    this.decimals = decimals\n    this.name = name\n    this.symbol = symbol\n  }\n\n  public equals(other: Currency): boolean {\n    if (this === other) {\n      return true\n    }\n    return this.name === other.name && this.symbol === other.symbol\n  }\n}\n\nexport const ETHER = Currency.ETHER\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency, ETHER } from '../currency'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n  public readonly decimalScale: JSBI\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount(currency: Currency, rawAmount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount(currency: Currency, numerator: BigintIsh, denominator: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: Currency, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\nimport { Token } from '..'\nimport { TokenAmount } from '.'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  get adjusted(): Fraction {\n    return this.asFraction.multiply(this.scalar)\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply(other: Price): Price {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    if (this.quoteCurrency instanceof Token) {\n      return TokenAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n    }\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport { CurrencyAmount, Fraction } from '.'\nimport { Token } from '..'\nimport { BigintIsh } from '../..'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  constructor(token: Token, amount: BigintIsh, denominator?: BigintIsh) {\n    super(token, amount, denominator)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public multiply(other: Fraction | BigintIsh): TokenAmount {\n    const multiplied = super.multiply(other)\n    return TokenAmount.fromFractionalAmount(this.token, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): TokenAmount {\n    const divided = super.divide(other)\n    return TokenAmount.fromFractionalAmount(this.token, divided.numerator, divided.denominator)\n  }\n\n  /**\n   * fromRawAmount\n   * @param token the token\n   * @param rawAmount the numerator of the fractional token amount\n   */\n  public static fromRawAmount(token: Token, rawAmount: BigintIsh): TokenAmount {\n    return new TokenAmount(token, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param token the token\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount(token: Token, numerator: BigintIsh, denominator: BigintIsh): TokenAmount {\n    return new TokenAmount(token, numerator, denominator)\n  }\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '..'\nimport { validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  public equals(other: Token): boolean {\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n\nexport function currencyEquals(currencyA: Currency, currencyB: Currency) {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  [1]: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  [3]: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [4]: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [5]: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [42]: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  [10]: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [69]: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [42161]: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  [421611]: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether')\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n","import { Token } from '.'\nimport { ChainId } from '..'\n\nexport const WETH: { [chainId: number]: Token } = {\n  [ChainId.MAINNET]: new Token(ChainId.MAINNET, '0x891CDB91D149F23B1A45D9C5CA78A88D0CB44C18', 6, 'WDA', 'Wrapped DA'),\n  [ChainId.TESTNET]: new Token(ChainId.TESTNET, '0x8f44113A985076431b77f6078f0929f949cB8836', 6, 'WDA', 'Wrapped DA'),\n  [ChainId.SHASTA]: new Token(ChainId.SHASTA, '0xB970B980C520EC3F49921C2727BFA6DE79E7226A', 6, 'WDA', 'Wrapped DA')\n}\n","import { CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact(\n  midPrice: Price,\n  inputAmount: CurrencyAmount,\n  outputAmount: CurrencyAmount\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","MaxUint256","JSBI","BigInt","Currency","decimals","symbol","name","Number","isInteger","invariant","this","prototype","equals","other","ETHER","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","_proto","invert","add","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","_Fraction","currency","_this","call","lessThanOrEqual","decimalScale","exponentiate","_inheritsLoose","ether","amount","fromRawAmount","rawAmount","fromFractionalAmount","added","subtracted","multiplied","divided","toExact","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","scalar","quote","currencyAmount","result","Token","TokenAmount","adjustedForDecimals","asFraction","_CurrencyAmount","token","raw","validateAndParseAddress","address","getAddress","error","_Currency","chainId","sortsBefore","toLowerCase","WETH9","_WETH","MAX_SAFE_INTEGER","ZERO","ONE","TWO","WETH","MAINNET","TESTNET","SHASTA","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","currencyA","currencyB","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","value","greaterThanOrEqual","Math","floor","sqrt","toNumber","z","x"],"mappings":"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"}